-- =====================================================
-- PAYFLY - SCHEMA COMPLETO DO SUPABASE
-- =====================================================
-- Execute este script completo no SQL Editor do Supabase
-- Este script apaga TUDO e recria o banco do zero

-- LIMPEZA COMPLETA - Remove todas as tabelas e fun√ß√µes
DROP TABLE IF EXISTS categorias CASCADE;
DROP TABLE IF EXISTS qr_payments CASCADE;
DROP TABLE IF EXISTS investimentos CASCADE;
DROP TABLE IF EXISTS poupanca CASCADE;
DROP TABLE IF EXISTS receitas CASCADE;
DROP TABLE IF EXISTS despesas CASCADE;
DROP TABLE IF EXISTS planos CASCADE;
DROP TABLE IF EXISTS usuarios CASCADE;
DROP FUNCTION IF EXISTS increment_category_usage(TEXT, TEXT, UUID) CASCADE;

-- =================== CRIA√á√ÉO DAS TABELAS ===================

-- 1. Tabela de Usu√°rios
CREATE TABLE usuarios (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    nome TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    criado_em TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- 2. Tabela de Receitas
CREATE TABLE receitas (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    usuario_id uuid REFERENCES usuarios(id) ON DELETE CASCADE,
    descricao TEXT NOT NULL,
    valor NUMERIC(12,2) NOT NULL,
    data DATE NOT NULL,
    categoria TEXT DEFAULT 'Outros',
    categoria_sugerida_ia TEXT,
    tipo TEXT NOT NULL DEFAULT 'receita',
    criado_em TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- 3. Tabela de Despesas
CREATE TABLE despesas (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    usuario_id uuid REFERENCES usuarios(id) ON DELETE CASCADE,
    descricao TEXT NOT NULL,
    valor NUMERIC(12,2) NOT NULL,
    data DATE NOT NULL,
    categoria TEXT DEFAULT 'Outros',
    categoria_sugerida_ia TEXT,
    tipo TEXT NOT NULL DEFAULT 'despesa',
    criado_em TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- 4. Tabela de Planos/Objetivos Futuros
CREATE TABLE planos (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    usuario_id uuid REFERENCES usuarios(id) ON DELETE CASCADE,
    descricao TEXT NOT NULL,
    valor NUMERIC(12,2) NOT NULL, -- Valor total do objetivo
    data DATE NOT NULL, -- Data meta para alcan√ßar o objetivo
    categoria TEXT DEFAULT 'Outros',
    categoria_sugerida_ia TEXT,
    tipo TEXT NOT NULL DEFAULT 'plano',
    status TEXT DEFAULT 'ativo', -- 'ativo', 'pausado', 'concluido', 'cancelado'
    valor_poupado NUMERIC(12,2) DEFAULT 0, -- Quanto j√° foi poupado para este objetivo
    progresso_percentual NUMERIC(5,2) DEFAULT 0, -- Calculado: (valor_poupado/valor)*100
    prioridade INTEGER DEFAULT 1, -- 1=baixa, 2=m√©dia, 3=alta
    observacoes TEXT, -- Campo adicional para contexto da IA
    criado_em TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- 5. Tabela de Poupan√ßa
CREATE TABLE poupanca (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    usuario_id uuid REFERENCES usuarios(id) ON DELETE CASCADE,
    descricao TEXT NOT NULL,
    valor NUMERIC(12,2) NOT NULL,
    data DATE NOT NULL,
    tipo TEXT NOT NULL DEFAULT 'Dep√≥sito',
    plano_vinculado_id uuid REFERENCES planos(id) ON DELETE SET NULL,
    plano_vinculado_nome TEXT, -- Nome do plano para facilitar consultas
    categoria TEXT DEFAULT 'Poupan√ßa',
    observacoes TEXT, -- Campo adicional para contexto da IA
    criado_em TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- 6. Tabela de Investimentos
CREATE TABLE investimentos (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    usuario_id uuid REFERENCES usuarios(id) ON DELETE CASCADE,
    descricao TEXT NOT NULL,
    valor_investido NUMERIC(12,2) NOT NULL,
    valor_atual NUMERIC(12,2),
    data_aplicacao DATE NOT NULL,
    tipo TEXT NOT NULL DEFAULT 'Renda Fixa',
    rentabilidade NUMERIC(5,2) DEFAULT 0.00,
    categoria TEXT DEFAULT 'Investimentos',
    criado_em TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Tabela de QR Payments removida

-- 6. Tabela de Categorias (Predefinidas e Personalizadas)
CREATE TABLE categorias (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    usuario_id uuid REFERENCES usuarios(id) ON DELETE CASCADE,
    nome TEXT NOT NULL,
    icone TEXT DEFAULT 'üìÅ',
    cor TEXT DEFAULT '#667eea',
    tipo TEXT NOT NULL CHECK (tipo IN ('receita', 'despesa', 'plano', 'poupanca', 'investimento', 'todas')),
    e_padrao BOOLEAN DEFAULT false,
    frequencia_uso INTEGER DEFAULT 0,
    criado_em TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    
    -- Constraint para evitar categorias duplicadas
    CONSTRAINT unique_categoria_usuario UNIQUE(usuario_id, nome, tipo)
);

-- =================== ATIVA√á√ÉO DE RLS ===================

ALTER TABLE usuarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE receitas ENABLE ROW LEVEL SECURITY;
ALTER TABLE despesas ENABLE ROW LEVEL SECURITY;
ALTER TABLE planos ENABLE ROW LEVEL SECURITY;
ALTER TABLE poupanca ENABLE ROW LEVEL SECURITY;
ALTER TABLE investimentos ENABLE ROW LEVEL SECURITY;
ALTER TABLE categorias ENABLE ROW LEVEL SECURITY;

-- =================== POL√çTICAS RLS ===================

-- Pol√≠ticas para Usu√°rios
CREATE POLICY "Usuario gerencia seu proprio perfil"
  ON usuarios
  FOR ALL
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- Pol√≠ticas para Receitas
CREATE POLICY "Usuario gerencia suas receitas"
  ON receitas
  FOR ALL
  USING (auth.uid() = usuario_id)
  WITH CHECK (auth.uid() = usuario_id);

-- Pol√≠ticas para Despesas
CREATE POLICY "Usuario gerencia suas despesas"
  ON despesas
  FOR ALL
  USING (auth.uid() = usuario_id)
  WITH CHECK (auth.uid() = usuario_id);

-- Pol√≠ticas para Planos
CREATE POLICY "Usuario gerencia seus planos"
  ON planos
  FOR ALL
  USING (auth.uid() = usuario_id)
  WITH CHECK (auth.uid() = usuario_id);

-- Pol√≠ticas para Poupan√ßa
CREATE POLICY "Usuario gerencia sua poupanca"
  ON poupanca
  FOR ALL
  USING (auth.uid() = usuario_id)
  WITH CHECK (auth.uid() = usuario_id);

-- Pol√≠ticas para Investimentos
CREATE POLICY "Usuario gerencia seus investimentos"
  ON investimentos
  FOR ALL
  USING (auth.uid() = usuario_id)
  WITH CHECK (auth.uid() = usuario_id);

-- Pol√≠ticas para Categorias
CREATE POLICY "Usuario ve categorias padrao e proprias"
  ON categorias
  FOR SELECT
  USING (e_padrao = true OR auth.uid() = usuario_id);

CREATE POLICY "Usuario gerencia categorias personalizadas"
  ON categorias  
  FOR ALL
  USING (auth.uid() = usuario_id AND e_padrao = false)
  WITH CHECK (auth.uid() = usuario_id AND e_padrao = false);

-- =================== DADOS INICIAIS ===================

-- Inserir categorias padr√£o do sistema
INSERT INTO categorias (usuario_id, nome, icone, cor, tipo, e_padrao) VALUES
-- RECEITAS
(NULL, 'Sal√°rio', 'üíº', '#28a745', 'receita', true),
(NULL, 'Freelance', 'üíª', '#17a2b8', 'receita', true),
(NULL, 'Investimentos', 'üìà', '#ffc107', 'receita', true),
(NULL, 'Vendas', 'üõí', '#20c997', 'receita', true),
(NULL, 'Aluguel', 'üè†', '#fd7e14', 'receita', true),
(NULL, 'Pens√£o', 'üë•', '#6f42c1', 'receita', true),
(NULL, 'B√¥nus', 'üéÅ', '#e83e8c', 'receita', true),
(NULL, 'Outros', 'üí∞', '#6c757d', 'receita', true),

-- DESPESAS
(NULL, 'Alimenta√ß√£o', 'üçΩÔ∏è', '#fd7e14', 'despesa', true),
(NULL, 'Transporte', 'üöó', '#6f42c1', 'despesa', true),
(NULL, 'Moradia', 'üè†', '#20c997', 'despesa', true),
(NULL, 'Sa√∫de', 'üè•', '#dc3545', 'despesa', true),
(NULL, 'Educa√ß√£o', 'üìö', '#0d6efd', 'despesa', true),
(NULL, 'Lazer', 'üéÆ', '#e83e8c', 'despesa', true),
(NULL, 'Roupas', 'üëï', '#6610f2', 'despesa', true),
(NULL, 'Tecnologia', 'üì±', '#0dcaf0', 'despesa', true),
(NULL, 'Impostos', 'üèõÔ∏è', '#6c757d', 'despesa', true),
(NULL, 'Cart√£o Cr√©dito', 'üí≥', '#dc3545', 'despesa', true),
(NULL, 'Combust√≠vel', '‚õΩ', '#ff6b6b', 'despesa', true),
(NULL, 'Outros', 'üí∏', '#6c757d', 'despesa', true),

-- PLANOS/OBJETIVOS FUTUROS
(NULL, 'Viagem', '‚úàÔ∏è', '#17a2b8', 'plano', true),
(NULL, 'Ve√≠culo', 'ÔøΩ', '#6f42c1', 'plano', true),
(NULL, 'Casa Pr√≥pria', 'üè†', '#fd7e14', 'plano', true),
(NULL, 'Educa√ß√£o', 'üéì', '#198754', 'plano', true),
(NULL, 'Casamento', 'ÔøΩ', '#e83e8c', 'plano', true),
(NULL, 'Aposentadoria', 'üë¥', '#6c757d', 'plano', true),
(NULL, 'Reserva Emerg√™ncia', 'üõ°Ô∏è', '#ffc107', 'plano', true),
(NULL, 'Neg√≥cio Pr√≥prio', 'üíº', '#28a745', 'plano', true),
(NULL, 'Outros', 'üìã', '#6c757d', 'plano', true),

-- POUPAN√áA
(NULL, 'Poupan√ßa', 'üí∞', '#28a745', 'poupanca', true),
(NULL, 'Reserva Emerg√™ncia', 'üÜò', '#dc3545', 'poupanca', true),
(NULL, 'Meta Espec√≠fica', 'üéØ', '#ffc107', 'poupanca', true),
(NULL, 'Viagem', '‚úàÔ∏è', '#17a2b8', 'poupanca', true),
(NULL, 'Casa Pr√≥pria', 'üè†', '#fd7e14', 'poupanca', true),
(NULL, 'Educa√ß√£o', 'üéì', '#6f42c1', 'poupanca', true),
(NULL, 'Aposentadoria', 'üë¥', '#6c757d', 'poupanca', true),
(NULL, 'Outros', 'üí∏', '#6c757d', 'poupanca', true),

-- INVESTIMENTOS
(NULL, 'Renda Fixa', 'üè¶', '#28a745', 'investimento', true),
(NULL, 'Renda Vari√°vel', 'üìà', '#dc3545', 'investimento', true),
(NULL, 'Fundos Imobili√°rios', 'üè¢', '#fd7e14', 'investimento', true),
(NULL, 'Tesouro Direto', 'üáßüá∑', '#0d6efd', 'investimento', true),
(NULL, 'CDB/LCI/LCA', 'üí≥', '#20c997', 'investimento', true),
(NULL, 'A√ß√µes', 'üìä', '#e83e8c', 'investimento', true),
(NULL, 'Criptomoedas', '‚Çø', '#ffc107', 'investimento', true),
(NULL, 'Fundos de Investimento', 'üìã', '#6f42c1', 'investimento', true),
(NULL, 'Outros', 'üíº', '#6c757d', 'investimento', true);



-- =================== FUN√á√ïES AUXILIARES ===================

-- Fun√ß√£o para incrementar uso de categoria
CREATE OR REPLACE FUNCTION increment_category_usage(
    category_name TEXT,
    category_type TEXT,
    user_id UUID
) 
RETURNS VOID 
LANGUAGE plpgsql 
SECURITY DEFINER
AS $$
BEGIN
    -- Tenta incrementar categoria existente
    UPDATE categorias 
    SET frequencia_uso = frequencia_uso + 1,
        updated_at = NOW()
    WHERE nome = category_name 
      AND tipo = category_type 
      AND (categorias.usuario_id = increment_category_usage.user_id OR categorias.usuario_id IS NULL);
    
    -- Se n√£o encontrou, cria nova categoria personalizada
    IF NOT FOUND THEN
        INSERT INTO categorias (nome, tipo, usuario_id, frequencia_uso, e_padrao)
        VALUES (category_name, category_type, user_id, 1, false)
        ON CONFLICT (usuario_id, nome, tipo) DO UPDATE 
        SET frequencia_uso = categorias.frequencia_uso + 1,
            updated_at = NOW();
    END IF;
END;
$$;

-- Fun√ß√£o para atualizar timestamp automaticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- =================== TRIGGERS PARA UPDATED_AT ===================

-- Triggers para atualizar automaticamente o campo updated_at
CREATE TRIGGER update_usuarios_updated_at BEFORE UPDATE ON usuarios
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_receitas_updated_at BEFORE UPDATE ON receitas
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_despesas_updated_at BEFORE UPDATE ON despesas
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_planos_updated_at BEFORE UPDATE ON planos
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_poupanca_updated_at BEFORE UPDATE ON poupanca
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_investimentos_updated_at BEFORE UPDATE ON investimentos
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_categorias_updated_at BEFORE UPDATE ON categorias
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =================== √çNDICES PARA PERFORMANCE ===================

-- √çndices para melhorar performance das consultas
CREATE INDEX idx_receitas_usuario_data ON receitas (usuario_id, data DESC);
CREATE INDEX idx_despesas_usuario_data ON despesas (usuario_id, data DESC);
CREATE INDEX idx_planos_usuario_data ON planos (usuario_id, data DESC);
CREATE INDEX idx_poupanca_usuario_data ON poupanca (usuario_id, data DESC);
CREATE INDEX idx_investimentos_usuario_data ON investimentos (usuario_id, data_aplicacao DESC);
CREATE INDEX idx_categorias_tipo_usuario ON categorias (tipo, usuario_id, frequencia_uso DESC);

-- Nota: Fun√ß√µes de busca removidas por n√£o estarem sendo utilizadas no c√≥digo JavaScript
-- Se precisar de busca avan√ßada no futuro, implemente diretamente nas queries do JS

-- =================== FUN√á√ïES E TRIGGERS PARA INTEGRA√á√ÉO PLANOS-POUPAN√áA ===================

-- Fun√ß√£o para calcular o progresso dos planos baseado na poupan√ßa vinculada
CREATE OR REPLACE FUNCTION calcular_progresso_plano(plano_id uuid)
RETURNS void AS $$
DECLARE
    total_poupado NUMERIC(12,2) := 0;
    valor_objetivo NUMERIC(12,2);
    novo_progresso NUMERIC(5,2);
BEGIN
    -- Busca o valor total do objetivo
    SELECT valor INTO valor_objetivo FROM planos WHERE id = plano_id;
    
    -- Calcula o total poupado para este plano
    SELECT COALESCE(SUM(valor), 0) 
    INTO total_poupado 
    FROM poupanca 
    WHERE plano_vinculado_id = plano_id 
    AND tipo = 'Dep√≥sito';
    
    -- Subtrai os saques
    SELECT total_poupado - COALESCE(SUM(valor), 0)
    INTO total_poupado
    FROM poupanca 
    WHERE plano_vinculado_id = plano_id 
    AND tipo = 'Saque';
    
    -- Calcula o percentual de progresso
    IF valor_objetivo > 0 THEN
        novo_progresso := (total_poupado / valor_objetivo) * 100;
        -- Limita a 100%
        IF novo_progresso > 100 THEN
            novo_progresso := 100;
        END IF;
    ELSE
        novo_progresso := 0;
    END IF;
    
    -- Atualiza o plano
    UPDATE planos 
    SET 
        valor_poupado = total_poupado,
        progresso_percentual = novo_progresso,
        status = CASE 
            WHEN novo_progresso >= 100 THEN 'concluido'
            WHEN novo_progresso > 0 THEN 'ativo'
            ELSE status
        END,
        updated_at = now()
    WHERE id = plano_id;
    
END;
$$ LANGUAGE plpgsql;

-- Trigger para atualizar progresso quando poupan√ßa √© modificada
CREATE OR REPLACE FUNCTION trigger_atualizar_progresso_plano()
RETURNS trigger AS $$
BEGIN
    -- Se h√° plano vinculado, recalcula o progresso
    IF NEW.plano_vinculado_id IS NOT NULL THEN
        PERFORM calcular_progresso_plano(NEW.plano_vinculado_id);
    END IF;
    
    -- Se o plano vinculado mudou, recalcula o antigo tamb√©m
    IF TG_OP = 'UPDATE' AND OLD.plano_vinculado_id IS NOT NULL AND OLD.plano_vinculado_id != NEW.plano_vinculado_id THEN
        PERFORM calcular_progresso_plano(OLD.plano_vinculado_id);
    END IF;
    
    -- Se foi deletado, recalcula o progresso do plano
    IF TG_OP = 'DELETE' AND OLD.plano_vinculado_id IS NOT NULL THEN
        PERFORM calcular_progresso_plano(OLD.plano_vinculado_id);
        RETURN OLD;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Aplica o trigger na tabela poupan√ßa
DROP TRIGGER IF EXISTS trigger_progresso_plano ON poupanca;
CREATE TRIGGER trigger_progresso_plano
    AFTER INSERT OR UPDATE OR DELETE ON poupanca
    FOR EACH ROW
    EXECUTE FUNCTION trigger_atualizar_progresso_plano();

-- Fun√ß√£o para obter insights completos de um plano (para IA)
CREATE OR REPLACE FUNCTION obter_insights_plano(plano_id uuid)
RETURNS json AS $$
DECLARE
    resultado json;
BEGIN
    SELECT json_build_object(
        'plano', json_build_object(
            'id', p.id,
            'descricao', p.descricao,
            'valor_objetivo', p.valor,
            'data_meta', p.data,
            'categoria', p.categoria,
            'status', p.status,
            'valor_poupado', p.valor_poupado,
            'progresso_percentual', p.progresso_percentual,
            'prioridade', p.prioridade,
            'dias_restantes', (p.data - CURRENT_DATE),
            'valor_faltante', (p.valor - p.valor_poupado),
            'valor_mensal_necessario', 
                CASE 
                    WHEN (p.data - CURRENT_DATE) > 0 
                    THEN (p.valor - p.valor_poupado) / GREATEST((p.data - CURRENT_DATE) / 30.0, 1)
                    ELSE 0 
                END
        ),
        'movimentacoes_poupanca', (
            SELECT json_agg(
                json_build_object(
                    'id', s.id,
                    'descricao', s.descricao,
                    'valor', s.valor,
                    'data', s.data,
                    'tipo', s.tipo
                ) ORDER BY s.data DESC
            )
            FROM poupanca s 
            WHERE s.plano_vinculado_id = plano_id
        ),
        'estatisticas', json_build_object(
            'total_depositos', (
                SELECT COALESCE(SUM(valor), 0) 
                FROM poupanca 
                WHERE plano_vinculado_id = plano_id AND tipo = 'Dep√≥sito'
            ),
            'total_saques', (
                SELECT COALESCE(SUM(valor), 0) 
                FROM poupanca 
                WHERE plano_vinculado_id = plano_id AND tipo = 'Saque'
            ),
            'media_mensal_poupanca', (
                SELECT COALESCE(AVG(valor), 0)
                FROM poupanca 
                WHERE plano_vinculado_id = plano_id 
                AND tipo = 'Dep√≥sito'
                AND data >= CURRENT_DATE - INTERVAL '6 months'
            )
        )
    )
    INTO resultado
    FROM planos p
    WHERE p.id = plano_id;
    
    RETURN resultado;
END;
$$ LANGUAGE plpgsql;

-- =================== COMENT√ÅRIOS FINAIS ===================

-- Script executado com sucesso! 
-- Seu banco PayFly est√° pronto para uso com:
-- ‚úÖ 6 tabelas principais criadas
-- ‚úÖ Pol√≠ticas RLS configuradas  
-- ‚úÖ 29 categorias predefinidas inseridas
-- ‚úÖ Sistema de categoriza√ß√£o inteligente
-- ‚úÖ Filtros avan√ßados por categoria
-- ‚úÖ Fun√ß√µes de busca otimizadas
-- ‚úÖ Triggers autom√°ticos configurados
-- ‚úÖ √çndices para performance otimizada
-- 
-- FUNCIONALIDADES IMPLEMENTADAS:
-- üîç Filtros por descri√ß√£o, valor, data E CATEGORIA
-- ü§ñ Categoriza√ß√£o inteligente com IA
-- üìä Relat√≥rios por categoria
-- üè∑Ô∏è Tags visuais coloridas
-- ‚ö° Performance otimizada com √≠ndices